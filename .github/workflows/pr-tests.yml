name: tests

on:
  pull_request:
    branches: [ main ]
    types: [opened, reopened, synchronize]
    paths:
      - package/bin/**
      - package/lib/requirements.txt
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  splunk-test:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        version: [9.4.1, 9.3.3, 9.2.5]

    env:
      TEST_CITY: guanacaste
      TEST_COUNTRY: CR
      TEST_INDEX: weather_test
      KV_COLLECTION: city_geo
      BASE_URL: http://localhost:3000
      API_KEY: dummy-key

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps (pip + jq)
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          python -m pip install splunk-packaging-toolkit splunk-add-on-ucc-framework
          python -m pip install -r package/lib/requirements.txt
          python -m pip install pytest requests-mock
          sudo apt-get update && sudo apt-get install -y jq

      - name: Build TA, enable input, write account
        id: build
        run: |
          set -euxo pipefail
          APP_VER=$(jq -r '.info.id.version' package/app.manifest)
          APP_ID=$(jq -r '.info.id.name' package/app.manifest)
          echo "app_version=${APP_VER}" >> $GITHUB_OUTPUT
          echo "app_id=${APP_ID}" >> $GITHUB_OUTPUT
          ucc-gen build --ta-version "${APP_VER}"
          mkdir -p "output/${APP_ID}/local"
          sed 's/disabled = 1/disabled = 0/' etc/cicd/inputs.conf > "output/${APP_ID}/local/inputs.conf"
          cat > "output/${APP_ID}/local/ta_tdd_demo_account.conf" <<EOF
          [demo_account]
          base_url = ${BASE_URL}
          api_key = ${API_KEY}
          EOF

      - name: Start containers (network, Mockoon, Splunk) + wait
        shell: bash
        run: |
          set -euxo pipefail
          docker network create shared-net || true

          # ---- Mockoon (robusto con debug y verificación del JSON) ----
          ID=$(docker ps -aq -f name=^/mockoon$ || true); if [ -n "$ID" ]; then docker rm -f mockoon; fi
          docker run -d --name mockoon --network shared-net \
            -v "${{ github.workspace }}/tests/openweather_mock.json:/data/mock.json:ro" \
            -p 3000:3000 mockoon/cli:latest \
            start --data /data/mock.json --index 0 --hostname 0.0.0.0 --port 3000 --log-transaction --debug
          for i in {1..30}; do
            state=$(docker inspect -f '{{.State.Status}}' mockoon || echo "none")
            if [ "$state" = "running" ] && docker exec mockoon test -s /data/mock.json && \
               (curl -sf http://localhost:3000/health >/dev/null || curl -sf http://localhost:3000/ >/dev/null); then
              echo "✅ Mockoon up"; break
            fi
            echo "Esperando a Mockoon..."; docker logs --tail=50 mockoon || true; sleep 2
          done
          if ! curl -sf http://localhost:3000/health >/dev/null; then
            echo "❌ Mockoon no respondió /health. Logs:"; docker logs mockoon || true; exit 1
          fi
          curl -sSf "http://localhost:3000/geo/1.0/direct?q=guanacaste,CR&limit=1&appid=dummy-key" >/dev/null
          curl -sSf "http://localhost:3000/data/2.5/weather?lat=10.5&lon=-85.4&appid=dummy-key" >/dev/null

          # ---- Splunk ----
          ID=$(docker ps -aq -f name=^/splunk$ || true); if [ -n "$ID" ]; then docker rm -f splunk; fi
          docker run -d --name splunk --network shared-net \
            -e SPLUNK_START_ARGS="--answer-yes --no-prompt --accept-license" \
            -e SPLUNK_PASSWORD="password" -e SPLUNK_USER="root" \
            -v "${{ github.workspace }}/output/${{ steps.build.outputs.app_id }}:/opt/splunk/etc/apps/${{ steps.build.outputs.app_id }}" \
            -p 8000:8000 -p 8089:8089 "splunk/splunk:${{ matrix.version }}"
          for i in {1..60}; do
            docker logs splunk 2>&1 | grep -q "Ansible playbook complete" && break
            sleep 5
          done
          docker exec splunk curl -sf http://mockoon:3000/health >/dev/null

      - name: Obtain session & create index
        id: sess
        run: |
          set -euxo pipefail
          XML=$(curl -sk -u admin:password https://localhost:8089/services/auth/login -d username=admin -d password=password)
          KEY=$(echo "$XML" | sed -n 's:.*<sessionKey>\(.*\)</sessionKey>.*:\1:p')
          echo "SPLUNK_SESSION_KEY=$KEY" >> $GITHUB_OUTPUT
          curl -sk -u admin:password https://localhost:8089/services/data/indexes \
            -d name=${TEST_INDEX} -d datatype=event -d maxTotalDataSizeMB=100 || true

      - name: Run integration tests
        working-directory: ./tests
        env:
          SPLUNK_SESSION_KEY: ${{ steps.sess.outputs.SPLUNK_SESSION_KEY }}
          SPLUNK_APP: ${{ steps.build.outputs.app_id }}
          KV_COLLECTION: ${{ env.KV_COLLECTION }}
          OWNER: nobody
          SPLUNK_HOST: localhost
          SPLUNK_PORT: "8089"
          SPLUNK_SCHEME: https
          BASE_URL: ${{ env.BASE_URL }}
          API_KEY: ${{ env.API_KEY }}
          TEST_CITY: ${{ env.TEST_CITY }}
          TEST_COUNTRY: ${{ env.TEST_COUNTRY }}
          TEST_INDEX: ${{ env.TEST_INDEX }}
        run: |
          set -euxo pipefail
          mkdir -p "${{ github.workspace }}/tests/junit"
          pytest -q integration --junitxml="${{ github.workspace }}/tests/junit/integration-${{ matrix.version }}.xml" || true

      - uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Tests Results
          path: 'tests/junit/*.xml'
          reporter: java-junit
          fail-on-error: 'false'
          fail-on-empty: 'false'
