name: tests

on:
  pull_request:
    branches: [ main ]
    types: [opened, reopened, synchronize]
    paths:
      - ta_tdd_demo/package/bin/**
      - ta_tdd_demo/package/lib/requirements.txt
  workflow_dispatch:
    inputs:
      splunk_versions:
        description: "list of versions"
        required: false
        default: "9.4.1,9.3.3,9.2.5"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  splunk-test:
    name: Deploy and test the TA
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
    matrix:
      version: [9.4.1, 9.3.3, 9.2.5]

    env:
      TEST_CITY: guanacaste
      TEST_COUNTRY: CR
      TEST_INDEX: weather_test
      KV_COLLECTION: city_geo
      BASE_URL: http://localhost:3000
      API_KEY: dummy-key

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.7'

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade splunk-packaging-toolkit splunk-add-on-ucc-framework
          sudo apt-get update && sudo apt-get install -y jq

      - name: Build TA
        id: build
        shell: bash
        run: |
          app_version=$(jq -r '.info.id.version' ta_tdd_demo/package/app.manifest)
          app_id=$(jq -r '.info.id.name' ta_tdd_demo/package/app.manifest)
          echo "app_version=${app_version}" >> $GITHUB_OUTPUT
          echo "app_id=${app_id}" >> $GITHUB_OUTPUT
          (cd ta_tdd_demo && ucc-gen build --ta-version "${app_version}")
          mkdir -p ta_tdd_demo/output/${app_id}/local
          cp etc/cicd/inputs.conf ta_tdd_demo/output/${app_id}/local/inputs.conf
          cat > ta_tdd_demo/output/${app_id}/local/ta_tdd_demo_account.conf <<EOF
          [demo_account]
          base_url = ${BASE_URL}
          api_key = ${API_KEY}
          EOF
          chmod -R +r ta_tdd_demo/output
          chmod -R go-w ta_tdd_demo/output

      - run: docker network create shared-net

      - name: Start Mockoon container
        run: |
          set -euxo pipefail
          ls -l ${{ github.workspace }}/tests/openweather_mock.json
          docker rm -f mockoon || true
          docker run -d --name mockoon \
            --network shared-net \
            -v ${{ github.workspace }}/tests/openweather_mock.json:/data/mock.json:ro \
            -p 3000:3000 \
            mockoon/cli:latest start \
            --data /data/mock.json \
            --hostname 0.0.0.0 \
            --port 3000 \
            --log-transaction
          docker logs --tail=100 mockoon || true
          docker inspect -f '{{json .NetworkSettings.Ports}}' mockoon

      - name: Test Mockoon is alive
        run: |
          for i in {1..30}; do
            if curl --silent --fail http://localhost:3000/health; then
              echo "Mockoon is up!"; exit 0
            fi
            echo "Waiting for Mockoon..."; sleep 2
            docker logs --tail=50 mockoon || true
          done
          echo "Mockoon failed to start"; exit 1

      - name: Sanity endpoints
        run: |
          curl -sSf "http://localhost:3000/geo/1.0/direct?q=guanacaste,CR&limit=1&appid=dummy-key" >/dev/null
          curl -sSf "http://localhost:3000/data/2.5/weather?lat=10.5&lon=-85.4&appid=dummy-key" >/dev/null

      - name: Start Splunk container
        env:
          SPLUNK_START_ARGS: "--answer-yes --no-prompt --accept-license"
          SPLUNK_PASSWORD: password
        run: |
          docker run -d --name splunk \
            --network shared-net \
            -e SPLUNK_START_ARGS="$SPLUNK_START_ARGS" \
            -e SPLUNK_PASSWORD="$SPLUNK_PASSWORD" \
            -e SPLUNK_USER="root" \
            -v ${{ github.workspace }}/ta_tdd_demo/output/${{ steps.build.outputs.app_id }}:/opt/splunk/etc/apps/${{ steps.build.outputs.app_id }} \
            -p 8000:8000 \
            -p 8089:8089 \
            splunk/splunk:${{ matrix.version }}
          sleep 150

      - name: Test Splunk readiness + connectivity to Mockoon
        run: |
          echo "Test whether Splunk is ready..."
          EXPECTED="Ansible playbook complete, will begin streaming splunkd_stderr.log"
          docker logs splunk 2>&1 | tail -n 50 | grep -F "$EXPECTED" && echo "Found expected line." || (echo "Expected line not found." && exit 1)
          echo "Test connectivity from Splunk to Mockoon..."
          docker exec splunk curl -sSf http://mockoon:3000/health >/dev/null

      - name: Obtain Splunk session key
        id: sess
        run: |
          XML=$(curl -sk -u admin:password https://localhost:8089/services/auth/login -d username=admin -d password=password)
          KEY=$(echo "$XML" | sed -n 's:.*<sessionKey>\(.*\)</sessionKey>.*:\1:p')
          if [ -z "$KEY" ]; then echo "Failed to obtain session key"; exit 1; fi
          echo "SPLUNK_SESSION_KEY=$KEY" >> $GITHUB_OUTPUT

      - name: Create test index
        run: |
          curl -sk -u admin:password https://localhost:8089/services/data/indexes \
            -d name=${TEST_INDEX} -d datatype=event -d maxTotalDataSizeMB=100 || true

      - name: Run integration tests
        working-directory: ./tests
        env:
          SPLUNK_SESSION_KEY: ${{ steps.sess.outputs.SPLUNK_SESSION_KEY }}
          SPLUNK_APP: ${{ steps.build.outputs.app_id }}
          KV_COLLECTION: ${{ env.KV_COLLECTION }}
          OWNER: nobody
          SPLUNK_HOST: localhost
          SPLUNK_PORT: "8089"
          SPLUNK_SCHEME: https
          BASE_URL: ${{ env.BASE_URL }}
          API_KEY: ${{ env.API_KEY }}
          TEST_CITY: ${{ env.TEST_CITY }}
          TEST_COUNTRY: ${{ env.TEST_COUNTRY }}
          TEST_INDEX: ${{ env.TEST_INDEX }}
        run: |
          python -m pip install --upgrade pip
          pip install -r ../requirements.txt
          pip install pytest requests-mock splunk-sdk
          mkdir -p junit
          python -m pytest integration/* --junitxml=junit/integration-test-results-${{ matrix.version }}.xml

      - name: Export Mockoon logs
        if: always()
        run: |
          mkdir -p logs/
          docker logs mockoon > ${{ github.workspace }}/logs/mockoon-${{ matrix.version }}.log 2>&1

      - name: Upload Mockoon logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mockoon-logs-${{ matrix.version }}
          path: logs/mockoon-${{ matrix.version }}.log

      - uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Tests Results
          path: 'tests/junit/*.xml'
          reporter: java-junit
          fail-on-error: 'false'
