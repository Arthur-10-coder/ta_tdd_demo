name: tests

on:
  pull_request:
    branches:
      - main
    types: [opened, reopened, synchronize]
    paths:
      - package/bin/**
      - package/lib/requirements.txt
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  splunk-test:
    name: Deploy and test the TA
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        version: [9.4.1, 9.3.3, 9.2.5]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade splunk-packaging-toolkit splunk-add-on-ucc-framework

      - name: Build TA
        id: build
        shell: bash
        run: |
          app_version=$(jq -r '.info.id.version' package/app.manifest)
          echo "app_version=${app_version}" >> $GITHUB_OUTPUT
          app_id=$(jq -r '.info.id.name' package/app.manifest)
          echo "app_id=${app_id}" >> $GITHUB_OUTPUT
          ucc-gen build --ta-version ${app_version}
          mkdir -p output/${app_id}/local
          cp etc/cicd/inputs.conf output/${app_id}/local/inputs.conf
          # Cuenta local para el mock
          cat > output/${app_id}/local/ta_tdd_demo_account.conf <<EOF
          [demo_account]
          base_url = http://localhost:3000
          api_key = dummy-key
          EOF
          chmod -R +r output
          chmod -R go-w output

      - run: docker network create shared-net

      - name: Start Mockoon container
        run: |
          docker run -d --name mockoon \
            --network shared-net \
            -v ${{ github.workspace }}/tests/openweather_mock.json:/data/mockoon.json \
            -p 3000:3000 \
            mockoon/cli:latest \
            --data /data/mockoon.json --port 3000 --log-transaction


      - name: Test Mockoon is alive
        run: |
          for i in {1..10}; do
            if curl --silent --fail http://localhost:3000/health; then
              echo "Mockoon is up!"
              exit 0
            fi
            echo "Waiting for Mockoon..."
            sleep 2
          done
          echo "Mockoon failed to start"
          docker logs mockoon
          exit 1

      - name: Start Splunk container
        env:
          SPLUNK_START_ARGS: "--answer-yes --no-prompt --accept-license"
          SPLUNK_PASSWORD: password
        run: |
          docker rm -f splunk 2>/dev/null || true
          docker run -d --name splunk \
            --network shared-net \
            -e SPLUNK_START_ARGS="$SPLUNK_START_ARGS" \
            -e SPLUNK_PASSWORD="$SPLUNK_PASSWORD" \
            -e SPLUNK_USER="root" \
            -v ${{ github.workspace }}/output/${{ steps.build.outputs.app_id }}:/opt/splunk/etc/apps/${{ steps.build.outputs.app_id }} \
            -p 8000:8000 -p 8089:8089 \
            splunk/splunk:${{ matrix.version }}
          # Espera bÃ¡sica
          sleep 150

      - name: Test connectivity from Splunk to Mockoon
        run: |
          echo "Check Splunk readiness..."
          EXPECTED="Ansible playbook complete"
          docker logs splunk 2>&1 | grep -F "$EXPECTED" || (echo "Splunk not ready"; exit 1)
          echo "Curl from Splunk to Mockoon..."
          docker exec splunk curl -sf http://mockoon:3000/health

      - name: Run integration tests
        env:
          BASE_URL: http://localhost:3000
          API_KEY: dummy-key
          TEST_CITY: guanacaste
          TEST_COUNTRY: CR
          TEST_INDEX: weather_test
          SPLUNK_HOST: localhost
          SPLUNK_PORT: "8089"
          SPLUNK_SCHEME: https
          OWNER: nobody
          KV_COLLECTION: city_geo
          SPLUNK_APP: ${{ steps.build.outputs.app_id }}
        working-directory: ./tests
        run: |
          pip install -r test-requirements.txt
          mkdir -p junit
          python -m pytest integration/* --junitxml=junit/integration-${{ matrix.version }}.xml

      - name: Run functional tests
        if: success()
        working-directory: ./tests
        run: |
          python -m pytest modinput_functional/* --junitxml=junit/test-results-${{ matrix.version }}.xml

      - name: Exporting Mockoon logs
        if: always()
        run: |
          mkdir -p logs/
          docker logs mockoon > ${{ github.workspace }}/logs/mockoon-${{ matrix.version }}.log 2>&1

      - name: Upload Mockoon logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mockoon-logs-${{ matrix.version }}
          path: logs/mockoon-${{ matrix.version }}.log

      - uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Tests Results
          path: 'tests/junit/*.xml'
          reporter: java-junit
          fail-on-error: 'false'
          fail-on-empty: 'false'
